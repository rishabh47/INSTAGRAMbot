#importing the necessary libraries

import requests, urllib
from textblob import TextBlob
from textblob.sentiments import NaiveBayesAnalyzer

#storing the access token generated by instagram

APP_ACCESS_TOKEN = '208014350.4eeea30.7433615d06c948a8a1ad60e741c4203c'

#base url which will be used in every endpoint

BASE_URL = 'https://api.instagram.com/v1/'


#Function declaration to get your own info

def self_info():
    request_url = (BASE_URL + 'users/self/?access_token=%s') % (APP_ACCESS_TOKEN)
    print 'GET request url : %s' % (request_url)
    user_info = requests.get(request_url).json()
    #if code is 200 then get info
    if user_info['meta']['code'] == 200:
        if len(user_info['data']):
            print 'Username: %s' % (user_info['data']['username'])
            print 'No. of followers: %s' % (user_info['data']['counts']['followed_by'])
            print 'No. of people you are following: %s' % (user_info['data']['counts']['follows'])
            print 'No. of posts: %s' % (user_info['data']['counts']['media'])
        else:
            print 'User does not exist!'
    else:
        print 'Status code other than 200 received!'

#Function declaration to get the ID of a user by username

def get_user_id(insta_username):
    request_url = (BASE_URL + 'users/search?q=%s&access_token=%s') % (insta_username, APP_ACCESS_TOKEN)
    print 'GET request url : %s' % (request_url)
    user_info = requests.get(request_url).json()

    if user_info['meta']['code'] == 200:
        if len(user_info['data']):
            return user_info['data'][0]['id']
        else:
            return None
    else:
        print 'Status code other than 200 received!'
        exit()


#Function declaration to get the info of a user by username

def get_user_info(insta_username):
    user_id = get_user_id(insta_username)
    if user_id == None:
        print 'User does not exist!'
        exit()
    request_url = (BASE_URL + 'users/%s?access_token=%s') % (user_id, APP_ACCESS_TOKEN)
    print 'GET request url : %s' % (request_url)
    user_info = requests.get(request_url).json()

    if user_info['meta']['code'] == 200:
        if len(user_info['data']):
            print 'Username: %s' % (user_info['data']['username'])
            print 'No. of followers: %s' % (user_info['data']['counts']['followed_by'])
            print 'No. of people you are following: %s' % (user_info['data']['counts']['follows'])
            print 'No. of posts: %s' % (user_info['data']['counts']['media'])
        else:
            print 'There is no data for this user!'
    else:
        print 'Status code other than 200 received!'

#Function declaration to get your recent post

def get_own_post():
    request_url = (BASE_URL + 'users/self/media/recent/?access_token=%s') % (APP_ACCESS_TOKEN)
    print 'GET request url : %s' % (request_url)
    own_media = requests.get(request_url).json()

    if own_media['meta']['code'] == 200:
        if len(own_media['data']):
            #to download image
            image_name = own_media['data'][0]['id'] + '.jpeg'
            image_url = own_media['data'][0]['images']['standard_resolution']['url']
            urllib.urlretrieve(image_url, image_name)
            print 'Your image has been downloaded!'
            return own_media['data'][0]['id']
        else:
            print 'Post does not exist!'
    else:
        print 'Status code other than 200 received!'

#Function declaration to get the recent post of a user by username

def get_user_post(insta_username):
    user_id = get_user_id(insta_username)
    if user_id == None:
        print 'User does not exist!'
        exit()
    request_url = (BASE_URL + 'users/%s/media/recent/?access_token=%s') % (user_id, APP_ACCESS_TOKEN)
    print 'GET request url : %s' % (request_url)
    user_media = requests.get(request_url).json()

    if user_media['meta']['code'] == 200:
        if len(user_media['data']):
            #to download the image
            image_name = user_media['data'][0]['id'] + '.jpeg'
            image_url = user_media['data'][0]['images']['standard_resolution']['url']
            urllib.urlretrieve(image_url, image_name)
            print 'Your image has been downloaded!'
            return user_media['data'][0]['id']
        else:
            print 'Post does not exist!'
    else:
        print 'Status code other than 200 received!'
#Function declaration to get least liked recent post

def get_user_least_like_post(insta_username):
    user_id = get_user_id(insta_username)
    if user_id == None:
        print 'User does not exist!'
        exit()
    request_url = (BASE_URL + 'users/%s/media/recent/?access_token=%s') % (user_id, APP_ACCESS_TOKEN)
    print 'GET request url : %s' % (request_url)
    user_media = requests.get(request_url).json()
    #a simple bubble sort to sort media by least number of likes
    if user_media['meta']['code'] == 200:
        if len(user_media['data']):
            for a in range(len(user_media)):
                for f in range(len(user_media)-1):
                    if user_media['data'][f]['likes']['count'] > user_media['data'][f + 1]['likes']['count']:
                        temp = user_media['data'][f]
                        user_media['data'][f] = user_media['data'][f + 1]
                        user_media['data'][f + 1] = temp
            #to download the image
            image_name = user_media['data'][0]['id'] + '.jpeg'
            image_url = user_media['data'][0]['images']['standard_resolution']['url']
            urllib.urlretrieve(image_url, image_name)
            print 'Your image has been downloaded!'
            return user_media['data'][0]['id']
        else:
            print 'Post does not exist!'
    else:
        print 'Status code other than 200 received!'

#Function declaration to get recent media liked by a user

def recent_media_liked():
    request_url = (BASE_URL + 'users/self/media/liked?access_token=%s') % (APP_ACCESS_TOKEN)
    print 'GET request url : %s' % (request_url)
    user_media = requests.get(request_url).json()

    if user_media['meta']['code'] == 200:
        if len(user_media['data']):
            image_name = user_media['data'][0]['id'] + '.jpeg'
            image_url = user_media['data'][0]['images']['standard_resolution']['url']
            urllib.urlretrieve(image_url, image_name)
            print 'Your recently liked image has been downloaded!'

        else:
            print 'Post does not exist!'
    else:
        print 'Status code other than 200 received!'

#Function declaration to get the ID of the recent post of a user by username

def get_post_id(insta_username):
    user_id = get_user_id(insta_username)
    if user_id == None:
        print 'User does not exist!'
        exit()
    request_url = (BASE_URL + 'users/%s/media/recent/?access_token=%s') % (user_id, APP_ACCESS_TOKEN)
    print 'GET request url : %s' % (request_url)
    user_media = requests.get(request_url).json()

    if user_media['meta']['code'] == 200:
        if len(user_media['data']):
            return user_media['data'][0]['id']
        else:
            print 'There is no recent post of the user!'
            exit()
    else:
        print 'Status code other than 200 received!'
        exit()

#Function declaration to like the recent post of a user

def like_a_post(insta_username):
    media_id = get_post_id(insta_username)
    request_url = (BASE_URL + 'media/%s/likes') % (media_id)
    #payload to be sent in the body of request
    payload = {"access_token": APP_ACCESS_TOKEN}
    print 'POST request url : %s' % (request_url)
    post_a_like = requests.post(request_url, payload).json()
    if post_a_like['meta']['code'] == 200:
        print 'Like was successful!'
    else:
        print 'Your like was unsuccessful. Try again!'

#Function declaration to make a comment on the recent post of the user

def post_a_comment(insta_username):
    media_id = get_post_id(insta_username)
    comment_text = raw_input("Your comment: ")
    payload = {"access_token": APP_ACCESS_TOKEN, "text" : comment_text}
    request_url = (BASE_URL + 'media/%s/comments') % (media_id)
    print 'POST request url : %s' % (request_url)

    make_comment = requests.post(request_url, payload).json()

    if make_comment['meta']['code'] == 200:
        print "Successfully added a new comment!"
    else:
        print "Unable to add comment. Try again!"


#Function decleration to get list of comments in recent media

def list_of_comment(insta_username):
    media_id = get_post_id(insta_username)
    request_url = (BASE_URL + 'media/%s/comments?access_token=%s') % (media_id,APP_ACCESS_TOKEN)
    print 'GET request url : %s' % (request_url)

    comment_list = requests.get(request_url,).json()

    if comment_list['meta']['code'] == 200:
        if len(comment_list['data']):
            for x in range(len(comment_list['data'])):
                print comment_list['data'][x]['text']
            print "Successfully printed all the comments!"
        else:
            print "No comments to print!"
    else:
        print "Unable to list comments. Try again!"

#Function declaration to make delete negative comments from the recent post

def delete_negative_comment(insta_username):
    media_id = get_post_id(insta_username)
    request_url = (BASE_URL + 'media/%s/comments/?access_token=%s') % (media_id, APP_ACCESS_TOKEN)
    print 'GET request url : %s' % (request_url)
    comment_info = requests.get(request_url).json()

    if comment_info['meta']['code'] == 200:
        if len(comment_info['data']):
            # implementation of how to delete the negative comments :)
            for x in range(0, len(comment_info['data'])):
                comment_id = comment_info['data'][x]['id']
                comment_text = comment_info['data'][x]['text']
                blob = TextBlob(comment_text, analyzer=NaiveBayesAnalyzer())
                if (blob.sentiment.p_neg > blob.sentiment.p_pos):
                    print 'Negative comment : %s' % (comment_text)
                    delete_url = (BASE_URL + 'media/%s/comments/%s/?access_token=%s') % (media_id, comment_id, APP_ACCESS_TOKEN)
                    print 'DELETE request url : %s' % (delete_url)
                    delete_info = requests.delete(delete_url).json()

                    if delete_info['meta']['code'] == 200:
                        print 'Comment successfully deleted!\n'
                    else:
                        print 'Unable to delete comment!'
                else:
                    print 'Positive comment : %s\n' % (comment_text)
        else:
            print 'There are no existing comments on the post!'
    else:
        print 'Status code other than 200 received!'

#Function decleration to delete comment by words given by user

def del_comment_word(insta_username):
    media_id = get_post_id(insta_username)
    print "Enter the word you want to search for"
    del_word = raw_input()
    request_url = (BASE_URL + 'media/%s/comments?access_token=%s') % (media_id,APP_ACCESS_TOKEN)
    print 'GET request url : %s' % (request_url)

    comment_list = requests.get(request_url,).json()
    flag =0
    if comment_list['meta']['code'] == 200:
        if len(comment_list['data']):
            #searching for thr word in all the comments
            for x in range(len(comment_list['data'])):
                comment_id = comment_list['data'][x]['id']
                if del_word in comment_list['data'][x]['text']:
                    flag=1
                    delete_url = (BASE_URL + 'media/%s/comments/%s/?access_token=%s') % (
                    media_id, comment_id, APP_ACCESS_TOKEN)
                    print 'DELETE request url : %s' % (delete_url)
                    delete_info = requests.delete(delete_url).json()
                    if delete_info['meta']['code'] == 200:
                        print 'Comment successfully deleted!\n'
                    else:
                        print 'Unable to delete comment!'
            if flag == 0:
                print "Your word %s was not in any comment! Try another word" % del_word
        else:
            print "No comments to delete!"
    else:
        print "Status code other than 200 found"

#Function decleration to get a post by iterating through comments

def iterate_comments(insta_username):
    user_id = get_user_id(insta_username)
    if user_id == None:
        print 'User does not exist!'
        exit()
    request_url = (BASE_URL + 'users/%s/media/recent/?access_token=%s') % (user_id, APP_ACCESS_TOKEN)
    print 'GET request url : %s' % (request_url)
    user_media = requests.get(request_url).json()
    #to display all the comments of recent 20 posts
    if user_media['meta']['code'] == 200:
        if len(user_media['data']):
            for a in range(20):
                mediaid = user_media['data'][a]['id']
                ur = 'https://api.instagram.com/v1/media/%s/comments?access_token=%s' % (mediaid,APP_ACCESS_TOKEN)
                comments = requests.get(ur).json()
                print "Comment number %s\n" %(a+1)
                for d in range(len(comments['data'])):
                    print comments['data'][d]['text']
        else:
            print "No media recieved"
    else:
        "Status code other than 200"
    #to select and download the post by a comment
    com = int(raw_input("Select the comment number of the post you want to download"))
    image_name = user_media['data'][com-1]['id'] + '.jpeg'
    image_url = user_media['data'][com-1]['images']['standard_resolution']['url']
    urllib.urlretrieve(image_url, image_name)
    print 'Your image has been downloaded!'

#list of all the functions
def start_bot():
    while True:
        print '\n'
        print 'Hey! Welcome to instaBot!'
        print 'Here are your menu options:'
        print "1.Get your own details\n"
        print "2.Get details of a user by username\n"
        print "3.Get your own recent post\n"
        print "4.Get the recent post of a user by username\n"
        print "5.Get the recent post of a user with least number of likes by username\n"
        print "6.Get the recent media liked by the user\n"
        print "7.Like the recent post of a user\n"
        print "8.Get a list of comments on the recent post of a user\n"
        print "9.Make a comment on the recent post of a user\n"
        print "10.Delete negative comments from the recent post of a user\n"
        print "11.Delete a comment by asking word from user\n"
        print "12.Get a user's post by iterating through comments\n"
        print "13.Exit\n"
        #calling all the functions
        choice = raw_input("Enter you choice: ")
        if choice == "1":
            self_info()
        elif choice == "2":
            insta_username = raw_input("Enter the username of the user: ")
            get_user_info(insta_username)
        elif choice == "3":
            get_own_post()
        elif choice == "4":
            insta_username = raw_input("Enter the username of the user: ")
            get_user_post(insta_username)
        elif choice == "5":
            insta_username = raw_input("Enter the username of the user: ")
            get_user_least_like_post(insta_username)
        elif choice=="6":
            recent_media_liked()
        elif choice=="7":
           insta_username = raw_input("Enter the username of the user: ")
           like_a_post(insta_username)
        elif choice=="8":
           insta_username = raw_input("Enter the username of the user: ")
           list_of_comment(insta_username)
        elif choice=="9":
           insta_username = raw_input("Enter the username of the user: ")
           post_a_comment(insta_username)
        elif choice=="10":
           insta_username = raw_input("Enter the username of the user: ")
           delete_negative_comment(insta_username)
        elif choice == "11":
           insta_username = raw_input("Enter the username of the user: ")
           del_comment_word(insta_username)
        elif choice == "12":
           insta_username = raw_input("Enter the username of the user: ")
           iterate_comments(insta_username)
        elif choice == "13":
            exit()
        else:
            print "Wrong input! Please choose a correct option."

start_bot()